#!/bin/bash

#### Singularity overhaul of our RNA-seq metagenomic pipeline

VERSION='0.5'
GRN='\033[1;32m'
GRN2='\033[0;32m'
UL='\033[4;34m'
NC='\033[0m' # No Color

if (( $# < 2 ))
then
  echo
  echo "Version:"
  echo "  v$VERSION, Alexander Predeus (predeus@gmail.com), 2022-2025" 
  echo "Synopsis:"
  echo "  Accurately discover and quantify bacterial reads in bulk or 10x Chromium/Visium RNA-seq datasets."
  echo "Usage:" 
  printf "  ${GRN}dreamcatcher${NC} ${GRN2}<reads_directory> <sample> [--bulk] [--bam] [--skip-remap] [--ram RAM] [-p CPUs]${NC}\n"
  echo 
  echo "Positional arguments:"
  echo "  <reads_directory>  Directory containing samples sub-directories with either unmapped reads from STARsolo,"
  echo "                     or 10x/bulk BAM file with unmapped reads included within"
  echo "  <sample_ID>        Unique ID of the sample to be processed. This has to be a subdirectory in the <reads_directory>"
  echo 
  echo "Options:"
  echo "  --bulk             Process reads in the bulk RNA-seq mode. No UMI/barcode operations will be performed."
  echo "                     Can be used in single-end or paired-end mode. Also can be used for SMART-Seq/2/3,"
  echo "                     or other plate-based methods"
  echo "  --bam              Unmapped reads are present in a BAM file within the sample directory." 
  echo "                     Can be used in both 10x single cell and bulk RNA-seq modes"
  echo "  --skip-remap       Start the pipeline from step 13 (useful when an error happened in one of the later steps)" 
  echo "  --ram [X]          Maximum amount of RAM available, in GB (default '100')."
  echo "                     Set this to about 10-20% less than the actual available memory!" 
  echo "  -p [X]             Number of cores for parallel execution (default '16')"
  echo  
  printf "See ${UL}github.com/apredeus/dreamcatcher${NC} for more information.\n"
  echo 
  exit 1
fi

echo "                                    =================================================================================="
echo "                                    =================================================================================="
echo "                                    ===                                                                            ==="
echo "                                    ===                        Welcome to Dreamcatcher!                            ==="
echo "                                    ===           Version $VERSION - Singularity packaging, with bulk/PE support        ==="
echo "                                    ===          2022-25 (c)  Alexander Predeus, Wellcome Sanger Institute         ==="
echo "                                    ===  For more information, visit https://github.com/apredeus/dreamcatcher      ==="
echo "                                    ===         Publication in preparation (I mean it this time).                  ==="
echo "                                    ===                                                                            ==="
echo "                                    =================================================================================="
echo "                                    =================================================================================="
echo
echo

### these are the command line parameters with some defaults; see below

FQDIR=""
TAG=""
CPUS=16
RAM=100
BULK=false
BAM=false
PAIRED=false
SKIPREMAP=false

#########################################################################################
########### These are the databases and files used by Dreamcatcher ######################
########### For now they are hardcoded here, but maybe should migrate to json ###########
#########################################################################################


SIF="/nfs/cellgeni/singularity/images/dreamcatcher.sif"
CMD="singularity run --bind /nfs,/lustre,/software $SIF"
NCBI="/nfs/cellgeni/refdata_dreamcatcher/NCBI_datasets/bacteria_ref/ncbi_dataset/data/"
KUDB="/nfs/cellgeni/refdata_dreamcatcher/KrakenUniq_select"
HST2T="/nfs/cellgeni/refdata_dreamcatcher/decoy_reference/T2T_mito_phix"
SEQ2TAXID="$KUDB/seqid2taxid.map.refseq"
GENBANK="$KUDB/assembly_summary_bacteria.txt"
GSA="$KUDB/gcf_species_genus.tsv"

#########################################################################################
######################## Don't change things below this line ############################
#########################################################################################

! getopt --test > /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    >&2 echo "ERROR: \"getopt --test\" failed in this environment"
    >&2 echo "Please make sure you have the most up-to-date version of getopt!" 
    exit 1
fi

PARSED=$(getopt -o p: --long bulk,bam,skip-remap,ram: -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    exit 2
fi

# read getoptâ€™s output this way to handle the quoting right:
eval set -- "$PARSED"

while true
do
    case "$1" in
        --bulk)
            BULK=true
            shift 1
            ;;
        --bam)
            BAM=true
            shift 1
            ;;
        --skip-remap)
            SKIPREMAP=true
            shift 1
            ;;
        --ram)
            RAM="$2"
            shift 2
            ;;
        -p)
            CPUS="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            >&2 echo "ERROR: option parsing has produced an unexpected result!"
            exit 3
            ;;
    esac
done

if (( $# != 2 )) 
then
    >&2 echo "ERROR: exactly 2 positional arguments (fastq directory and sample ID) are expected! Exiting.." 
    exit 1
else
    FQDIR=$1 
    TAG=$2
    if [[ ! -d $FQDIR || ! -d $FQDIR/$TAG ]] 
    then 
        >&2 echo "ERROR: either $FQDIR or $FQDIR/$TAG directories do not exist!"
    exit 1
    fi 
fi 

RDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SDIR="$RDIR/scripts"

if [[ `which singularity` == "" ]]
then
    >&2 echo "ERROR: can't find Singularity! make sure you have Singularity installed and added to \$PATH in your shell! Exiting.." 
    exit 1
fi 

## export script directory and singularity command, as well as available # of CPUS and RAM
export SDIR=$SDIR
export CMD=$CMD
export RAM=$RAM
export CPUS=$CPUS 

if [[ $BULK == true ]]
then
    echo "==> ["`date +%H:%M:%S`"] Initiating dreamcatcher run using BULK workflow!"  
else   
    echo "==> ["`date +%H:%M:%S`"] Initiating dreamcatcher run using 10x single cell/spatial workflow!"
fi 

echo "==> ["`date +%H:%M:%S`"] Following variables were set:"
echo
echo "                             FQDIR: $FQDIR"
echo "                              SDIR: $SDIR"
echo "                         SAMPLE ID: $TAG"
echo "                              CPUS: $CPUS"
echo "                    MAXIMIM RAM(G): $RAM"
echo "                         BULK MODE: $BULK"
echo "   SKIP REMAP (start from step 13): $SKIPREMAP"
echo "                         BAM INPUT: $BAM"
echo "                   SINGULARITY IMG: $SIF"
echo "                   SINGULARITY CMD: $CMD"
echo "                         REFSEQ DB: $NCBI"
echo "                         KRAKEN DB: $KUDB"
echo "            SEQUENCE-TO-TAXID file: $SEQ2TAXID"
echo "             GENBANK metadata file: $GENBANK"
echo " REFSEQ-SPECIES-GENUS mapping file: $GSA"
echo "     T2T & phiX decoy hisat2 index: $HST2T"
echo

mkdir -p $TAG && cd $TAG

## step 1 is tricky and has 6 distinct cases defined by the following parameters: 
## (1) bulk/single-cell mode (2) paired-end/single-end reads (3) BAM/unmapped fastq input
## only 10x is processed in single cell mode, and 10x reads are always coerced to UMI-Tools formatted single-end reads
## bulk reads are homopolymer-filtered and discarded if too short (<40 bp). 
## single end reads are homopolymer-filtered and barcodes are corrected vs the whitelist in case of STARsolo unmapped reads 
if [[ $SKIPREMAP == false ]]
then
	echo "==> ["`date +%H:%M:%S`"] STEP 1: Extract and preprocess the unmapped reads for further analysis.." 
	$SDIR/preprocess_unmapped_reads.sh $FQDIR $TAG $BULK $BAM > preprocess_reads.log
    $SDIR/log_stat.sh preprocessed 

	if [[ -s Unmapped_filt.R1.fastq.gz && -s Unmapped_filt.R2.fastq.gz ]]
	then
	    PAIRED=true
    elif [[ ! -s Unmapped_filt.R1.fastq.gz ]]
    then
        >2& echo "ERROR: STEP 1 (read extraction and pre-processing) did not produce Unmapped_filt.R1.fastq.gz! Exiting .." 
        exit 1
	fi
	
	echo "==> ["`date +%H:%M:%S`"] STEP 2: Running KrakenUniq .." 
	if [[ $PAIRED == false ]] 
	then
	    $CMD krakenuniq --threads $CPUS --db $KUDB --preload-size ${RAM}G --output kuniq.output.txt \
	        --report-file kuniq.report.txt Unmapped_filt.R1.fastq.gz &> kuniq.log
	    $CMD pigz kuniq.output.txt
	else 
	    $CMD krakenuniq --threads $CPUS --db $KUDB --preload-size ${RAM}G --output kuniq.output.txt \
	        --report-file kuniq.report.txt --paired Unmapped_filt.R1.fastq.gz Unmapped_filt.R2.fastq.gz &> kuniq.log
	    $CMD pigz kuniq.output.txt
	fi
	
	## KrakenUniq quits with no error and no output in some cases, still not sure why. Just re-run the job.  
	if (( `cat kuniq.report.txt | wc -l` < 10 ))
	then
	    >&2 echo "ERROR: STEP 2 (KrakenUniq) has produced an empty report file! Exiting .." 
	    exit 1
	fi
	## step 3: this script will find the best RefSeq genome for each detected species, using KrakenUniq output
	echo "==> ["`date +%H:%M:%S`"] STEP 3: Extracting unique bacterial RefSeq accessions .."
	$SDIR/kuniq_to_GCF.pl kuniq.report.txt $GSA $GENBANK > detected_strains.list 2> kuniq_to_GCF.log

	## step 4: now, make a combined genome and GFF files for all strains identified by KrakenUniq
	echo "==> ["`date +%H:%M:%S`"] STEP 4: Generating a combined genome and GFF file for all bacterial species .." 
	$SDIR/make_combined_reference.sh $NCBI detected_strains.list detected_strains &> detected.mkref.log  
	
	## steps 5-7: mapping to bacteria and human decoy. Notice the differential use of "-k/--max-seeds" and the relaxed soft-clipping penalty.
	echo "==> ["`date +%H:%M:%S`"] STEP 5: Making combined Hisat2 index .." 
	$CMD hisat2-build detected_strains.fna detected_strains &> detected.hisat2_build.log
	
	if [[ $PAIRED == false ]] 
	then 
	    echo "==> ["`date +%H:%M:%S`"] STEP 6: Mapping original unmapped reads to the combined reference using Hisat2 .." 
	    $CMD hisat2 -t -p$CPUS -k 5000 --sp 1,1 --no-spliced-alignment --no-unal -U Unmapped_filt.R1.fastq.gz -x \
	        detected_strains 2> detected.hisat2_map.log | $CMD samtools sort -@$CPUS --verbosity 0 -O BAM - > detected_strains.bam 2> /dev/null
	  
	    echo "==> ["`date +%H:%M:%S`"] STEP 7: Map same corrected reads to hisat2 index of T2T assembly."
	    $CMD hisat2 -t -p$CPUS -k 1 --max-seeds 1000 --sp 1,1 --no-unal -U Unmapped_filt.R1.fastq.gz -x \
	        $HST2T 2> hisat2_human.log | $CMD samtools sort -@$CPUS --verbosity 0 -O BAM - > human_remap.bam 2> /dev/null
	  
	    echo "==> ["`date +%H:%M:%S`"] STEP 8: Running featureCounts with accurate multimapper counting; annotate each read with gene, and number of bacterial and human mismatches .." 
	    $CMD featureCounts -T $CPUS -M -O --fraction -t gene -g locus_tag -s 0 -a detected_strains.gff \
	        -o detected.fcounts.tsv -R BAM detected_strains.bam &> detected.fcounts.log  
	    rm detected_strains.bam
	    mv detected_strains.bam.featureCounts.bam detected_fcounts.bam 
	else 
	    echo "==> ["`date +%H:%M:%S`"] STEP 6: Mapping original unmapped reads to the combined reference using Hisat2 .." 
	    $CMD hisat2 -t -p$CPUS -k 5000 --sp 1,1 --no-spliced-alignment --no-unal -1 Unmapped_filt.R1.fastq.gz -2 Unmapped_filt.R2.fastq.gz -x \
	        detected_strains 2> detected.hisat2_map.log | $CMD samtools sort -@$CPUS --verbosity 0 -O BAM - > detected_strains.bam
	  
	    echo "==> ["`date +%H:%M:%S`"] STEP 7: Map same corrected reads to hisat2 index of T2T assembly."
	    $CMD hisat2 -t -p$CPUS -k 1 --max-seeds 1000 --sp 1,1 --no-unal -1 Unmapped_filt.R1.fastq.gz -2 Unmapped_filt.R2.fastq.gz -x \
	    $HST2T 2> hisat2_human.log | $CMD samtools sort -@$CPUS --verbosity 0 -O BAM - > human_remap.bam
	  
	    echo "==> ["`date +%H:%M:%S`"] STEP 8: Running featureCounts with accurate multimapper counting; annotate each read with gene, and number of bacterial and human mismatches .." 
	    $CMD featureCounts -T $CPUS -p --countReadPairs -M -O --fraction -t gene -g locus_tag -s 0 -a detected_strains.gff \
	        -o detected.fcounts.tsv -R BAM detected_strains.bam &> detected.fcounts.log
	    rm detected_strains.bam
	    mv detected_strains.bam.featureCounts.bam detected_fcounts.bam 
	fi
	
	echo "==> ["`date +%H:%M:%S`"] STEP 9: Annotate reads with bacterial gene, and mismatch rate vs bacterial and human genomes .." 
	$SDIR/annotate_mapped_reads.pl detected_fcounts.bam human_remap.bam > detected.read_to_gene_w_mismatches.tsv
	
	echo "==> ["`date +%H:%M:%S`"] STEP 10: Making a gene biotype table .." 
	$SDIR/extract_gene_biotypes.pl detected_strains.gff > gene_biotypes.tsv
	
	## step 11: annotate the table and generate a summary per bacterial assembly(==accession)
	echo "==> ["`date +%H:%M:%S`"] STEP 11: Filtering/annotating the featureCounts table and generating summary per RefSeq accession .." 
	$SDIR/make_summary_tables.pl detected.fcounts.tsv gene_biotypes.tsv detected.read_to_gene_w_mismatches.tsv $SEQ2TAXID detected
    awk '{if ($9 != "rRNA") {print $1}}' detected.annotated_fcounts.tsv > detected.protein_genes.list
    awk '{if ($9 == "rRNA") {print $1}}' detected.annotated_fcounts.tsv > detected.rRNA_genes.list
	$SDIR/log_stat.sh detected
	
	### step 12: filter the annotated table based on the number of rRNA and non-rRNA genes etc. files filtered.summary.tsv and filtered.gene.list would be generated
	echo "==> ["`date +%H:%M:%S`"] STEP 12: Filtering the accessions: keeping strains that pass our filtering criteria.." 
	cp $RDIR/data/blacklisted_genes.list .
	$SDIR/filter_strains.pl detected.summary.tsv detected.annotated_fcounts.tsv blacklisted_genes.list > filter_strains.log
    grep -F -f filtered.gene.list detected.annotated_fcounts.tsv > filtered.annotated_fcounts.tsv
    awk '{if ($9 != "rRNA") {print $1}}' filtered.annotated_fcounts.tsv > filtered.protein_genes.list
    awk '{if ($9 == "rRNA") {print $1}}' filtered.annotated_fcounts.tsv > filtered.rRNA_genes.list
    cut -f1 filtered.summary.tsv > filtered_strains.list
	
    $SDIR/log_stat.sh filtered
	
	if [[ ! -s filtered.summary.tsv ]]
	then
	    >&2 echo "ERROR: no strains have passed the filtering threshold at STEP 11! Cleaning up and exiting .." 

        echo "==> ["`date +%H:%M:%S`"] STEP 13: Tidy up the output directories .." 
        $SDIR/organise_output_dir.sh $BULK $BAM 
        echo "==> ["`date +%H:%M:%S`"] STEP 14: Calculating the mapping stats .." 
        $SDIR/calculate_mapstats.sh $TAG > mapstats.tsv
	    
        echo "ALL DREAMCATCHER PROCESSING IS DONE - 0 STRAINS PASSED FILTERING! BYE!!!"
        exit 1
    fi
fi

### step 13: make the network file. use fast(er) sort, since files can be big. note that we ONLY use the filtered genes to estimate the overlap etc
echo "==> ["`date +%H:%M:%S`"] STEP 13: Make the network file using the overlapping reads .." 

$SDIR/get_shared_uniq_reads.sh 

$SDIR/make_read_network.pl filtered.read_type_strain.tsv  filtered.annotated_fcounts.tsv > nodes_and_edges.tsv &
$SDIR/make_read_network.pl rRNA.shared_reads.tsv          filtered.annotated_fcounts.tsv > rRNA.nodes_and_edges.tsv &
$SDIR/make_read_network.pl protein.shared_reads.tsv       filtered.annotated_fcounts.tsv > protein.nodes_and_edges.tsv &
wait

## step 14: cluster the read network into a more representative set of strains!
echo "==> ["`date +%H:%M:%S`"] STEP 14: Parse the network and get the definitive list of strains .." 
$CMD Rscript $SDIR/parse_read_network.R $GSA &> parse_read_network.log
sort -u -t$'\t' -k15,15 --merge filtered.cluster.tsv > top.cluster.tsv

echo "==> ["`date +%H:%M:%S`"] STEP 15: Making the new (top strain) bacterial reference and annotation, and building Hisat2 reference .."
cut -f1 top.cluster.tsv | grep -v RefSeq > top_strains.list
$SDIR/make_combined_reference.sh $NCBI top_strains.list top_strains &> top.mkref.log 
$CMD hisat2-build top_strains.fna top_strains &> top.hisat2_build.log 

if [[ $PAIRED == false ]] 
then 
    echo "==> ["`date +%H:%M:%S`"] STEP 16: Mapping filtered unmapped single-end reads to the top strain reference using Hisat2 .." 
    $CMD hisat2 -t -p$CPUS -k 100 --sp 1,1 --no-spliced-alignment --no-unal -U Unmapped_filt.R1.fastq.gz -x \
        top_strains 2> top.hisat2_map.log | $CMD samtools sort -@$CPUS --verbosity 0 -O BAM - > top_strains.bam 2> /dev/null
  
    echo "==> ["`date +%H:%M:%S`"] STEP 17: Running featureCounts (single-end) on top strains with accurate multimapper counting, output BAM" 
    $CMD featureCounts -T $CPUS -M -O --fraction -t gene -g locus_tag -s 0 -a top_strains.gff \
        -o top.fcounts.tsv -R BAM top_strains.bam &> top.fcounts.log  
    mv top_strains.bam.featureCounts.bam top_fcounts.bam 
else 
    echo "==> ["`date +%H:%M:%S`"] STEP 16: Mapping filtered unmapped paired-end reads to the top strain reference using Hisat2 .." 
    $CMD hisat2 -t -p$CPUS -k 100 --sp 1,1 --no-spliced-alignment --no-unal -1 Unmapped_filt.R1.fastq.gz -2 Unmapped_filt.R2.fastq.gz -x \
        top_strains 2> top.hisat2_map.log | $CMD samtools sort -@$CPUS --verbosity 0 -O BAM - > top_strains.bam
  
    echo "==> ["`date +%H:%M:%S`"] STEP 17: Running featureCounts (paired-end) on top strains with accurate multimapper counting, output BAM" 
    $CMD featureCounts -T $CPUS -p --countReadPairs -M -O --fraction -t gene -g locus_tag -s 0 -a top_strains.gff \
        -o top.fcounts.tsv -R BAM top_strains.bam &> top.fcounts.log
    mv top_strains.bam.featureCounts.bam top_fcounts.bam 
fi

  
echo "==> ["`date +%H:%M:%S`"] STEP 18: Annotate reads with bacterial gene, and mismatch rate vs bacterial and human genomes .." 
$SDIR/annotate_mapped_reads.pl top_fcounts.bam human_remap.bam > top.read_to_gene_w_mismatches.tsv
	
echo "==> ["`date +%H:%M:%S`"] STEP 19: Make annotated fcounts and summary table for top strains .." 
$SDIR/make_summary_tables.pl top.fcounts.tsv gene_biotypes.tsv top.read_to_gene_w_mismatches.tsv $SEQ2TAXID top

echo "==> ["`date +%H:%M:%S`"] STEP 20: Make an annotation file of top strains without the bad genes, and with GCF (strain RefSeq) ID .."
## top strains need to be filtered again, in order for all counts to be correct
awk -F '\t' '($9 == "rRNA" && $10 > 3.4) || ($9 != "rRNA" && $10 > 2.3) || $11 > 0.1' top.annotated_fcounts.tsv | cut -f1 > top_removed.genes.list
cat top_removed.genes.list blacklisted_genes.list | sort | uniq > top_bad.genes.list
$SDIR/filter_top_gff.pl top_strains.gff top_bad.genes.list $SEQ2TAXID > top_strains_filtered.gff

## finally, let's do proper counting. We will OVERWRITE all of the old top* files 
if [[ $PAIRED == false ]] 
then
    echo "==> ["`date +%H:%M:%S`"] STEP 21: Redo the counting with a new GFF (single-end mode) .."
    $CMD featureCounts -T $CPUS -M -O --fraction -t gene -g locus_tag -s 0 -a top_strains_filtered.gff \
        -o top.fcounts.tsv -R BAM top_strains.bam &> top.gene_fcounts.log
    $CMD samtools sort -@$CPUS top_strains.bam.featureCounts.bam > top_filtered_gene_sorted.bam 2> /dev/null
    $CMD samtools index top_filtered_gene_sorted.bam
    rm top_strains.bam.featureCounts.bam

    ## this counting is needed for UMI-tools; we will count reads with same UMI, barcode and strain once. This avoids overcouning due to rRNA operons
    $CMD featureCounts -T $CPUS -M -O --fraction -t gene -g strain_id -s 0 -a top_strains_filtered.gff \
        -o top.strain_fcounts.tsv -R BAM top_strains.bam &> top.strain_fcounts.log
    $CMD samtools sort -@$CPUS top_strains.bam.featureCounts.bam > top_filtered_strain_sorted.bam 2> /dev/null
    $CMD samtools index top_filtered_strain_sorted.bam
    rm top_strains.bam.featureCounts.bam top_strains.bam 

    echo "==> ["`date +%H:%M:%S`"] STEP 22: REMAKE annotated fcounts and summary table for top strains - now without human/mismatched/blacklisted genes.." 
    $SDIR/make_summary_tables.pl top.fcounts.tsv gene_biotypes.tsv top.read_to_gene_w_mismatches.tsv $SEQ2TAXID top
else 
    echo "==> ["`date +%H:%M:%S`"] STEP 21: Redo the counting with a new GFF (paired-end mode) .."
    $CMD featureCounts -T $CPUS -p --countReadPairs -M -O --fraction -t gene -g locus_tag -s 0 -a top_strains_filtered.gff \
        -o top.fcounts.tsv -R BAM top_strains.bam &> top.gene_fcounts.log
    $CMD samtools sort -@$CPUS top_strains.bam.featureCounts.bam > top_filtered_gene_sorted.bam 2> /dev/null
    $CMD samtools index top_filtered_gene_sorted.bam
    rm top_strains.bam.featureCounts.bam

    ## this counting is needed for UMI-tools; we will count reads with same UMI, barcode and strain once. This avoids overcouning due to rRNA operons 
    $CMD featureCounts -T $CPUS -p --countReadPairs -M -O --fraction -t gene -g strain_id -s 0 -a top_strains_filtered.gff \
        -o top.strain_fcounts.tsv -R BAM top_strains.bam &> top.strain_fcounts.log
    $CMD samtools sort -@$CPUS top_strains.bam.featureCounts.bam > top_filtered_strain_sorted.bam 2> /dev/null
    $CMD samtools index top_filtered_strain_sorted.bam
    rm top_strains.bam.featureCounts.bam top_strains.bam 

    echo "==> ["`date +%H:%M:%S`"] STEP 22: REMAKE annotated fcounts and summary table for top strains - now without human/mismatched/blacklisted genes.." 
    $SDIR/make_summary_tables.pl top.fcounts.tsv gene_biotypes.tsv top.read_to_gene_w_mismatches.tsv $SEQ2TAXID top
fi

## make lists of protein and rRNA genes for top strains  
awk '{if ($9 != "rRNA") {print $1}}' top.annotated_fcounts.tsv > top.protein_genes.list
awk '{if ($9 == "rRNA") {print $1}}' top.annotated_fcounts.tsv > top.rRNA_genes.list

$SDIR/log_stat.sh top

if [[ $BULK == true ]]
then
    echo "==> ["`date +%H:%M:%S`"] STEP 23: Tidy up the output directories .." 
    $SDIR/organise_output_dir.sh $BULK $BAM 

    echo "==> ["`date +%H:%M:%S`"] STEP 24: Calculating the mapping stats .." 
    $SDIR/calculate_mapstats.sh $TAG > mapstats.tsv
    
    echo "ALL DREAMCATCHER PROCESSING (BULK MODE) IS DONE! ENJOY!!!"
else 
    echo "==> ["`date +%H:%M:%S`"] STEP 23: Running final quantification using UMI-tools .."
    ## one BAM has actual bacterial genes, another has RefSeq strain ID for "gene" (XT)
    $CMD umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS --per-cell -I top_filtered_gene_sorted.bam   -S gene.umi_counts.tsv.gz   &>   gene.umi_tools_count.log 
    $CMD umi_tools count --per-gene --gene-tag=XT --assigned-status-tag=XS --per-cell -I top_filtered_strain_sorted.bam -S strain.umi_counts.tsv.gz &> strain.umi_tools_count.log 

    echo "==> ["`date +%H:%M:%S`"] STEP 24: Generate barcode-to-species table from per-gene UMI-tools .." 
    $SDIR/barcode_to_species.pl strain.umi_counts.tsv.gz $GSA > barcode_to_species.tsv
	$SDIR/log_stat.sh umi
    
    echo "==> ["`date +%H:%M:%S`"] STEP 25: Tidy up the output directories .." 
    $SDIR/organise_output_dir.sh $BULK $BAM 
    
    echo "==> ["`date +%H:%M:%S`"] STEP 26: Calculating the mapping stats .." 
    $SDIR/calculate_mapstats.sh $TAG > mapstats.tsv

    echo "ALL DREAMCATCHER PROCESSING (SINGLE CELL MODE) IS DONE! ENJOY!!!" 
fi
